# Disable .NET Telemetry
export DOTNET_CLI_TELEMETRY_OPTOUT=true

# Set EDITOR Preference: vim -> nano -> vi
# Don't set if respective editors cannot be found in /usr/bin
if [[ -f /usr/bin/vim ]]; then
    export EDITOR=/usr/bin/vim
elif [[ -f /usr/bin/nano ]]; then
    export EDITOR=/usr/bin/nano
elif [[ -f /usr/bin/vi ]]; then
    export EDITOR=/usr/bin/vi
fi

# Homebrew
if [[ $HOMEBREW_PREFIX && -d $HOMEBREW_PREFIX ]]; then
    # Set Homebrew package paths
    homebrew_paths=""

    if [[ -d "$HOMEBREW_PREFIX/opt/node/bin" ]]; then
        homebrew_paths="$homebrew_paths:$HOMEBREW_PREFIX/opt/node/bin"
    fi

    if [[ -d "$HOMEBREW_PREFIX/opt/openjdk/bin" ]]; then
        homebrew_paths="$homebrew_paths:$HOMEBREW_PREFIX/opt/openjdk/bin"
    fi

    if [[ -d "$HOMEBREW_PREFIX/openssl@3/bin" ]]; then
        homebrew_paths="$homebrew_paths:$HOMEBREW_PREFIX/openssl@3/bin"
    fi

    export PATH="$PATH:$homebrew_paths"

    # Set CPPFLAGS for Homebrew installed packages
    if [[ -d "$HOMEBREW_PREFIX/include" ]]; then
        cppflags="-I$HOMEBREW_PREFIX/include"
    fi

    if [[ -d "$HOMEBREW_PREFIX/opt/openssl/include" ]]; then
        cppflags="$cppflags -I$HOMEBREW_PREFIX/opt/openssl/include"
    fi

    if [[ -d "$HOMEBREW_PREFIX/opt/node/include" ]]; then
        cppflags="$cppflags -I$HOMEBREW_PREFIX/opt/node/include"
    fi

    if [[ -d "$HOMEBREW_PREFIX/opt/openjdk/include" ]]; then
        cppflags="$cppflags -I$HOMEBREW_PREFIX/opt/openjdk/include"
    fi

    if [[ -d "$HOMEBREW_PREFIX/opt/readline/include" ]]; then
        cppflags="$cppflags -I$HOMEBREW_PREFIX/opt/readline/include"
    fi

    if [[ -d "$HOMEBREW_PREFIX/opt/ruby/include" ]]; then
        cppflags="$cppflags -I$HOMEBREW_PREFIX/opt/ruby/include"
    fi

    export CPPFLAGS="$cppflags $CPPFLAGS"

    # Set LDFLAGS for Homebrew installed packages
    if [[ -d "$HOMEBREW_PREFIX/opt/openssl/lib" ]]; then
        ldflags="-L$HOMEBREW_PREFIX/opt/openssl/lib"
    fi

    if [[ -d "$HOMEBREW_PREFIX/opt/node/lib" ]]; then
        ldflags="$ldflags -L$HOMEBREW_PREFIX/opt/node/lib"
    fi

    if [[ -d "$HOMEBREW_PREFIX/opt/readline/lib" ]]; then
        ldflags="$ldflags -L$HOMEBREW_PREFIX/opt/readline/lib"
    fi

    if [[ -d "$HOMEBREW_PREFIX/opt/ruby/lib" ]]; then
        ldflags="$ldflags -L$HOMEBREW_PREFIX/opt/ruby/lib"
    fi

    export LDFLAGS="$ldflags $LDFLAGS"

    # Set PKG_CONFIG_PATH for Homebrew installed packages
    if [[ -d "$HOMEBREW_PREFIX/opt/openssl/lib/pkgconfig" ]]; then
        pkg_paths="$HOMEBREW_PREFIX/opt/openssl/lib/pkgconfig"
    fi

    if [[ -d "$HOMEBREW_PREFIX/opt/mysql-client/lib/pkgconfig" ]]; then
        pkg_paths="$pkg_paths:$HOMEBREW_PREFIX/opt/mysql-client/lib/pkgconfig"
    fi

    if [[ -d "$HOMEBREW_PREFIX/opt/ruby/lib/pkgconfig" ]]; then
        pkg_paths="$pkg_paths:$HOMEBREW_PREFIX/opt/ruby/lib/pkgconfig"
    fi

    if [[ $PKG_CONFIG_PATH ]]; then
        export PKG_CONFIG_PATH="$pkg_paths:$PKG_CONFIG_PATH"
    else
        export PKG_CONFIG_PATH="$pkg_paths"
    fi
fi

# Add personal directory paths
if [[ -d "$HOME/.local/bin" ]]; then
    export PATH="$HOME/.local/bin:$PATH"
fi

# JetBrains Toolbox
if [[ -d "$HOME/.local/share/JetBrains/Toolbox/scripts" ]]; then
    export PATH="$HOME/.local/share/JetBrains/Toolbox/scripts:$PATH"
fi

# Personal Scripts
if [[ -d "$HOME/scripts" ]]; then
    export PATH="$HOME/scripts/:$PATH"
fi

# Flatpak
if [[ -d "/var/lib/flatpak/exports/bin" ]]; then
    export PATH="$PATH:/var/lib/flatpak/exports/bin"
fi

# If nvm and nodenv are installed, then only enable nodenv
if ([[ -f "$HOME/.nvm/nvm.sh" ]] && [[ -f "$HOME/.nodenv/bin/nodenv" ]] || \
    [[ ! -f "$HOME/.nvm/nvm.sh" ]] && [[ -f "$HOME/.nodenv/bin/nodenv" ]]); then
    export PATH="$HOME/.nodenv/bin:$PATH"
    eval "$(nodenv init - zsh)"
    [ -s "$HOME/.nodenv/completions/nodenv.zsh" ] && \. "$HOME/.nodenv/completions/nodenv.zsh"
elif [[ -f "$HOME/.nvm/nvm.sh" ]]; then
    export NVM_DIR="$HOME/.nvm"
    [ -s "$HOME/.nvm/nvm.sh" ] && \. "$HOME/.nvm/nvm.sh"
    [ -s "$HOME/.nvm/etc/bash_completion.d/nvm" ] && \. "$HOME/.nvm/etc/bash_completion.d/nvm"
fi

# rbenv: Ruby Version Management
if [[ -f "$HOME/.rbenv/bin/rbenv" && -d "$HOMEBREW_PREFIX/opt/openssl" ]]; then
    eval "$($HOME/.rbenv/bin/rbenv init - zsh)"
    export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$HOMEBREW_PREFIX/opt/openssl"
elif [[ -f "$HOME/.rbenv/bin/rbenv" ]]; then
    eval "$($HOME/.rbenv/bin/rbenv init - zsh)"
fi

# rustup: Rust Installer
case ":${PATH}:" in
    *:"$HOME/.cargo/bin":*)
        ;;
    *)
        # Prepending path in case a system-installed rustc needs to be overridden
        export PATH="$HOME/.cargo/bin:$PATH"
        ;;
esac

# Go
if [[ -d "$HOME/go/bin" ]]; then
    export PATH="$HOME/go/bin:$PATH"
fi

# Android SDK Emulator
if [[ -d "$HOME/Android/Sdk/emulator" ]]; then
    export PATH="$PATH:$HOME/Android/Sdk/emulator"
fi

# Android SDK Tools
if [[ -d "$HOME/Android/Sdk/platform-tools" ]]; then
    export PATH="$PATH:$HOME/Android/Sdk/platform-tools"
fi

# Android SDK Vendor Keys
if [[ -f "$HOME/.android/adbkey" ]]; then
    export ADB_VENDOR_KEYS=$HOME/.android/adbkey
fi
